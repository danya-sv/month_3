from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery

from bot_config import (
    database,
    reg_account,
    reg_users,
    registered_users,
    reviewed_users,
)

review_router = Router()


class RestaurantReview(StatesGroup):
    name = State()
    phone_number = State()
    visit_date = State()
    food_rating = State()
    cleanliness_rating = State()
    extra_comments = State()
    total_rating = State()
    confirm = State()


@review_router.message(Command("stop"))
@review_router.message(F.text == "—Å—Ç–æ–ø")
async def stop_opros(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main_kb():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="5")],
            [types.KeyboardButton(text="4")],
            [types.KeyboardButton(text="3")],
            [types.KeyboardButton(text="2")],
            [types.KeyboardButton(text="1")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def cleanliness_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–û—á–µ–Ω—å —á–∏—Å—Ç–æ", callback_data="–û—á–µ–Ω—å —á–∏—Å—Ç–æ"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–°—Ä–µ–¥–Ω–µ —á–∏—Å—Ç–æ", callback_data="–°—Ä–µ–¥–Ω–µ —á–∏—Å—Ç–æ"
                )
            ],
            [types.InlineKeyboardButton(text="–ì—Ä—è–∑–Ω–æ", callback_data="–ì—Ä—è–∑–Ω–æ")],
        ]
    )


def review_kb():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [types.KeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


""" –§—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–ª, —á—Ç–æ–±—ã –≤ –∫–æ–¥–µ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É """


@review_router.callback_query(F.data == "review")
async def start_review(callback: CallbackQuery, state: FSMContext):
    id_user = callback.from_user.id
    if id_user not in reg_account:
        await callback.message.answer(
            "üîî –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
        await callback.answer()
        await state.clear()
        return

    if id_user in reviewed_users:
        await callback.message.answer(
            "üö´ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        )
        await callback.answer()
        await state.clear()
    else:
        reviewed_users.add(id_user)
        await callback.answer()  # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–∏–≥–∞–ª–∞
        await state.set_state(RestaurantReview.name)

    name_kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=registered_users[id_user])]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await callback.message.answer(
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=name_kb
    )


@review_router.message(RestaurantReview.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RestaurantReview.phone_number)
    id_user = message.from_user.id
    phone_kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=reg_users[id_user])]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +996, +7 –∏ —Ç.–¥.)",
        reply_markup=phone_kb,
    )


@review_router.message(RestaurantReview.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    code_num = ["+996", "+7", "+33", "+49", "+39", "+44", "+1"]
    for code in code_num:
        if message.text.startswith(code):
            await state.update_data(phone_number=message.text)
            await state.set_state(RestaurantReview.visit_date)
            await message.answer(
                "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.05.2024)"
            )
            return
    await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@review_router.message(RestaurantReview.visit_date)
async def process_visit_date(message: types.Message, state: FSMContext):
    await state.update_data(visit_date=message.text)
    await state.set_state(RestaurantReview.food_rating)

    await message.answer("üçΩÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã (–æ—Ç 1 –¥–æ 5)", reply_markup=main_kb())


@review_router.message(RestaurantReview.food_rating)
async def process_food_rating(message: types.Message, state: FSMContext):
    if message.text not in ["1", "2", "3", "4", "5"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")
    else:
        await state.update_data(food_rating=message.text)
        await state.set_state(RestaurantReview.cleanliness_rating)
        await message.answer(
            "üßπ –û—Ü–µ–Ω–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", reply_markup=cleanliness_keyboard()
        )


@review_router.callback_query(
    RestaurantReview.cleanliness_rating,
    F.data.in_(["–û—á–µ–Ω—å —á–∏—Å—Ç–æ", "–°—Ä–µ–¥–Ω–µ —á–∏—Å—Ç–æ", "–ì—Ä—è–∑–Ω–æ"]),
)
async def process_cleanliness_rating(callback: CallbackQuery, state: FSMContext):
    await state.update_data(cleanliness_rating=callback.data)
    await state.set_state(RestaurantReview.extra_comments)
    await callback.message.answer("üìù –û—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
    await callback.answer()


@review_router.message(RestaurantReview.extra_comments)
async def process_extra_comments(message: types.Message, state: FSMContext):
    await state.update_data(extra_comments=message.text)
    await state.set_state(RestaurantReview.total_rating)
    await message.answer(
        "‚≠ê –î–∞–π—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É", reply_markup=main_kb()
    )


@review_router.message(RestaurantReview.total_rating)
async def process_total_rating(message: types.Message, state: FSMContext):
    await state.update_data(total_rating=message.text)
    await state.set_state(RestaurantReview.confirm)
    data = await state.get_data()
    review_text = (
        f"üìã –í–∞—à –æ—Ç–∑—ã–≤:\n"
        f"üîπ –ò–º—è: {data['name']}\n"
        f"üîπ –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
        f"üîπ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {data['visit_date']}\n"
        f"üîπ –û—Ü–µ–Ω–∫–∞ –µ–¥—ã: {data['food_rating']}\n"
        f"üîπ –û—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã: {data['cleanliness_rating']}\n"
        f"üîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['extra_comments']}\n"
        f"üîπ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {data['total_rating']}\n\n"
        f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞?"
    )
    await message.answer(review_text, reply_markup=review_kb())


@review_router.message(RestaurantReview.confirm)
async def process_confirmation(message: types.Message, state: FSMContext):
    id_user = message.from_user.id
    if message.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        database.execute(
            query="""
              INSERT INTO reviews (name, phone_number, visit_date, food_rating, cleanliness_rating, extra_comments, total_rating)
              VALUES (?,?,?,?,?,?,?)      
            """,
            params=(
                data["name"],
                data["phone_number"],
                data["visit_date"],
                data["food_rating"],
                data["cleanliness_rating"],
                data["extra_comments"],
                data["total_rating"],
            ),
        )
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è!",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()

    elif message.text.lower() == "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å":
        if id_user in reviewed_users:
            reviewed_users.remove(id_user)

        await message.answer(
            "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'.")
